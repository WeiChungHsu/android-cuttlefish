# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

name: HostImage

on: [pull_request, push]
#on:
#  release:
#    types: [published]

jobs:
  # failed, branch or tag names starting with 'refs/' are not allowed.
  #test-release1-job:
  #  runs-on: ubuntu-latest
  #  permissions: write-all
  #  steps:
  #  - name: build
  #    run: echo "test-release1-job" > CHANGELOG1.md
  #  - name: version
  #    run: echo "test-release1-job"
  #    id: version
  #  - name: release
  #    uses: actions/create-release@v1
  #    id: create_release
  #    with:
  #      draft: false
  #      prerelease: false
  #      release_name: ${{ steps.version.outputs.version }}
  #      tag_name: ${{ github.ref }} # refs/heads/main
  #      body_path: CHANGELOG1.md
  #    env:
  #      GITHUB_TOKEN: ${{ github.token }}

  #this job works
  #test-release2-job:
  #  runs-on: ubuntu-latest
  #  permissions: write-all
  #  steps:
  #  - name: build
  #    run: echo "test-release2-job" > CHANGELOG2.md
  #  - name: version
  #    run: echo "test-release2-job"
  #    id: version
  #  - name: release
  #    uses: actions/create-release@v1
  #    id: create_release
  #    with:
  #      draft: false
  #      prerelease: false
  #      release_name: latest_host_image
  #      tag_name: latest
  #      body_path: CHANGELOG2.md
  #    env:
  #      GITHUB_TOKEN: ${{ github.token }}

  #test-release3-job:
  #  runs-on: ubuntu-latest
  #  steps:
  #  - name: build
  #    run: echo "test-release3-job" > CHANGELOG3.md
  #  - name: Create Release
  #    id: create_release
  #    uses: actions/create-release@v1
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      tag_name: ${{ github.ref }}
  #      release_name: Release ${{ github.ref }}
  #      body: CHANGELOG3.md
  #      draft: false
  #      prerelease: false        

  #test-release5-job:
  #  runs-on: ubuntu-latest
  #  steps:
  #  - name: build
  #    run: echo "test-release5-job" > CHANGELOG5.md
  #  - name: Create Release
  #    id: create_release
  #    uses: actions/create-release@v1
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      tag_name: latest
  #      release_name: latest_host_image
  #      body: CHANGELOG5.md
  #      draft: false
  #      prerelease: false        

  #this job works but will kill everything.
  #this job create tag name main and it kills everything
  #test-release6-job:
  #  runs-on: ubuntu-latest
  #  steps:
  #   - name: build
  #    run: echo "test-release6-job" > CHANGELOG6.md
  #  - name: Create Release
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #      tag: ${{ github.ref_name }}
  #    run: |
  #      gh release create "$tag" \
  #      --repo="$GITHUB_REPOSITORY" \
  #      --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
  #      --generate-notes        

  #test-release7-job:
  #  runs-on: ubuntu-latest
  #  permissions: write-all
  #  steps:
  #  - name: build
  #    run: echo "test-release7-job" > CHANGELOG7.md
  #  - name: version
  #    run: echo "test-release7-job"
  #    id: version
  #  - name: release
  #    uses: actions/create-release@v1
  #    id: create_release
  #    with:
  #      draft: false
  #      prerelease: false
  #      release_name: latest_host_image7
  #      tag_name: latest
  #      body_path: CHANGELOG7.md
  #    env:
  #      GITHUB_TOKEN: ${{ github.token }}

  #test-release8-job:
  #  runs-on: ubuntu-latest
  #  permissions: write-all
  #  steps:
  #  - name: build
  #    run: echo "test-release7-job" > CHANGELOG7.md && echo "test-release8-job" > CHANGELOG8.md
  #  - name: release
  #    uses: actions/create-release@v1
  #    id: create_release
  #    with:
  #      draft: false
  #      prerelease: false
  #      release_name: latest_host_image7
  #      tag_name: latest
  #      body_path: CHANGELOG7.md
  #    env:
  #      GITHUB_TOKEN: ${{ github.token }}
  #  - name: Upload Release Asset
  #    uses: actions/upload-release-asset@v1
  #    id: upload-release-asset
  #    env:
  #      GITHUB_TOKEN: ${{ github.token }}
  #    with:
  #      upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
  #      #upload_url: https://uploads.github.com/repos/WeiChungHsu/android-cuttlefish/releases/153364837/assets{?name,label}
  #      #upload_url: https://uploads.github.com/repos/WeiChungHsu/android-cuttlefish/releases/153365569/assets{?name,label}
  #      #https://github.com/WeiChungHsu/android-cuttlefish/releases/download/latest/CHANGELOG8.md
  #      asset_path: ./CHANGELOG8.md
  #      asset_name: CHANGELOG8.md
  #      asset_content_type: application/zip


  #test-release9-job:
  #  runs-on: ubuntu-latest
  #  permissions: write-all
  #  steps:
  #  - name: build
  #    run: echo "test-release9-job" > CHANGELOG9.md
  #  - name: Upload Release Asset
  #    uses: actions/upload-release-asset@v1
  #    id: upload-release-asset
  #    env:
  #      GITHUB_TOKEN: ${{ github.token }}
  #    with:
  #      upload_url: ${{ github.event.release.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        #upload_url: https://uploads.github.com/repos/WeiChungHsu/android-cuttlefish/releases/153364837/assets{?name,label}
        #upload_url: https://uploads.github.com/repos/WeiChungHsu/android-cuttlefish/releases/153365569/assets{?name,label}
        #https://github.com/WeiChungHsu/android-cuttlefish/releases/download/latest/CHANGELOG8.md
  #      asset_path: ./CHANGELOG9.md
  #      asset_name: CHANGELOG9.md
  #      asset_content_type: application/zip



  test-release10-job:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: build
      run: echo "test-release10-job" > CHANGELOG10.md
    - name: release
      uses: dev-drprasad/delete-tag-and-release@v1.1
      id: delete_tag_release
      with:
        tag_name: latest #(required) - The name of the tag to delete. This is expected to be solely the tag name, not the name of a git reference.
        delete_release: true #(optional) default: true - also delete all releases and their assets that are associated to the tag name
        repo: WeiChungHsu/android-cuttlefish #(optional) default: repo running this action - the target repository. 
        github_token: ${{ secrets.GITHUB_TOKEN }} # (required) - a GitHub token with write access to the repo where tags and releases will be searched and deleted

        
#https://github.com/WeiChungHsu/android-cuttlefish.git


